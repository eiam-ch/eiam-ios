// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% endif %}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command file_length implicit_return

// MARK: - Strings

{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    _ p{{forloop.counter}}: Any
    {% else %}
    _ p{{forloop.counter}}: {{type}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
  {% for type in types %}
    {% if type == "String" %}
    String(describing: p{{forloop.counter}})
    {% elif type == "UnsafeRawPointer" %}
    Int(bitPattern: p{{forloop.counter}})
    {% else %}
    p{{forloop.counter}}
    {% endif %}
    {{ ", " if not forloop.last }}
  {% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item %}
   enum Key : String {
    {% for string in item.strings %}
    {% if not param.noComments %}
    /// {{string.translation}}
    {% endif %}
    {{accessModifier}} case {{string.key}}
    {% endfor %}
    {% for child in item.children %}
    {% call recursiveBlock table child %}
    {% endfor %}
  }

  {% for string in item.strings %}
  {% if not param.noComments %}
  /// {{string.translation}}
  {% endif %}
  {% if string.types %}
  {{accessModifier}} static func {{string.key}}({% call parametersBlock string.types %}) -> String {
    return {{enumName}}.tr(Key.{{string.key}}, {% call argumentsBlock string.types %})
  }
  {% elif param.lookupFunction %}
  {# custom localization function is mostly used for in-app lang selection, so we want the loc to be recomputed at each call for those (hence the computed var) #}
  {{accessModifier}} static var {{string.key}}: String { return {{enumName}}.tr(Key.{{string.key}}) }
  {% else %}
  {{accessModifier}} static var {{string.key}}: String { return {{enumName}}.tr(Key.{{string.key}}) }
  {% endif %}
  {% endfor %}
  {% for child in item.children %}
  {% call recursiveBlock table child %}
  {% endfor %}
{% endmacro %}
// swiftlint:disable function_parameter_count identifier_name line_length type_body_length
{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
{{accessModifier}} enum {{enumName}} {
  {% if tables.count > 1 or param.forceFileNameEnum %}
  {% for table in tables %}
  {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call recursiveBlock table.name table.levels %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call recursiveBlock tables.first.name tables.first.levels %}
  {% endif %}
}
// swiftlint:enable function_parameter_count identifier_name line_length type_body_length

// MARK: - Implementation Details

class UBLocalizer {
    static var `default` = UBLocalizer()
    func makeDefault() {
        UBLocalizer.default = self
    }

    func translateWithDefaultLanguage(_ key: {{enumName}}.Key, _ table: String = "", _ args: CVarArg...) -> String {
        let format = BundleToken.bundle.localizedString(forKey: key.rawValue, value: nil, table: table)
        return String(format: format, locale: Locale.current, arguments: args)
    }

    public func translate(_ key: {{enumName}}.Key, languageKey: String? = nil, table: String = "{{param.tableName}}", _ args: CVarArg...) -> String {
      guard let languageKey = languageKey else {
        return self.translateWithDefaultLanguage(key, table, args)
      }

      guard let bundlePath = BundleToken.bundle.path(forResource: languageKey, ofType: "lproj"), let bundle = Bundle(path: bundlePath)
      else { return "" }
      return String(format: NSLocalizedString(key.rawValue, bundle: bundle, value: "", comment: ""), locale: Locale.current, arguments: args)
    }
}

private extension {{enumName}} {
    private static func tr(_ key: {{enumName}}.Key, _ table: String = "{{param.tableName}}", _ args: CVarArg...) -> String {
      UBLocalizer.default.translate(key, table: table, args)
    }
}

extension {{enumName}} {
    public static func translate(_ key: {{enumName}}.Key, languageKey: String? = nil, table: String = "{{param.tableName}}", _ args: CVarArg...) -> String {
        UBLocalizer.default.translate(key, languageKey: languageKey, table: table, args)
    }
}

{% if not param.bundle and not param.lookupFunction %}

// swiftlint:disable convenience_type
private final class BundleToken {
  static let bundle: Bundle = {
    #if SWIFT_PACKAGE
    return Bundle.module
    #else
    return Bundle(for: BundleToken.self)
    #endif
  }()
}
// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No string found
{% endif %}
