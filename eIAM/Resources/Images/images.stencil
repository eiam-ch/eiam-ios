// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% set enableUIKit %}{{param.enableUIKit|default:"true"}}{% endset %}
{% set enableSwiftUI %}{{param.enableSwiftUI|default:"false"}}{% endset %}
{% set enableColors %}{{param.enableColors|default:"false"}}{% endset %}
{% set colorType %}{{param.colorTypeName|default:"ColorAsset"}}{% endset %}
{% set dataType %}{{param.dataTypeName|default:"DataAsset"}}{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public {% endif %}{% endset %}

{% if enableUIKit == "true" %}
import UIKit
{% endif %}
{% if enableSwiftUI == "true" %}
import SwiftUI
{% endif %}

// swiftlint:disable superfluous_disable_command file_length implicit_return
{% macro enumBlock assets isSwiftUI %}
  {% call casesBlock assets isSwiftUI %}
  {% if param.allValues %}

  // swiftlint:disable trailing_comma
  {% if resourceCount.arresourcegroup > 0 %}
  {{accessModifier}}static let allResourceGroups: [{{arResourceGroupType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "arresourcegroup" "" %}{% endfilter %}
  ]
  {% endif %}
  {% if resourceCount.color > 0 %}
  {{accessModifier}}static let allColors: [{{colorType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
  ]
  {% endif %}
  {% if resourceCount.data > 0 %}
  {{accessModifier}}static let allDataAssets: [{{dataType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "data" "" %}{% endfilter %}
  ]
  {% endif %}
  {% if resourceCount.image > 0 %}
  {{accessModifier}}static let allImages: [{{imageType}}] = [
    {% filter indent:2 %}{% call allValuesBlock assets "image" "" %}{% endfilter %}
  ]
  {% endif %}
  // swiftlint:enable trailing_comma
  {% endif %}
{% endmacro %}
{% macro casesBlock assets isSwiftUI %}
  {% for asset in assets %}
  {% if asset.type == "arresourcegroup" %}
  {{accessModifier}}static let {{asset.name|lowerFirstWord|escapeReservedKeywords}} = {{arResourceGroupType}}(name: "{{asset.value}}")
  {% elif asset.type == "color" and enableColors == true %}
  {{accessModifier}}static let {{asset.name|lowerFirstWord|escapeReservedKeywords}} = {{colorType}}(name: "{{asset.value}}")
  {% elif asset.type == "data" %}
  {{accessModifier}}static let {{asset.name|lowerFirstWord|escapeReservedKeywords}} = {{dataType}}(name: "{{asset.value}}")
  {% elif asset.type == "image" and isSwiftUI == true %}
  static var {{asset.name|lowerFirstWord|escapeReservedKeywords}}: Image { Image.m("{{asset.value}}")! }
  {% elif asset.type == "image" %}
  static var {{asset.name|lowerFirstWord|escapeReservedKeywords}}: UIImage { UIImage.m("{{asset.value}}")! }
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
  {{accessModifier}}enum {{asset.name|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call casesBlock asset.items isSwiftUI %}{% endfilter %}
  }
  {% elif asset.items %}
  {% call casesBlock asset.items isSwiftUI %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
  {% for asset in assets %}
  {% if asset.type == filter %}
  {{prefix}}{{asset.name|lowerFirstWord|escapeReservedKeywords}},
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
  {% set prefix2 %}{{prefix}}{{asset.name|escapeReservedKeywords}}.{% endset %}
  {% call allValuesBlock asset.items filter prefix2 %}
  {% elif asset.items %}
  {% call allValuesBlock asset.items filter prefix %}
  {% endif %}
  {% endfor %}
{% endmacro %}

{%if enableUIKit == "true" %}
// swiftlint:disable identifier_name line_length nesting type_body_length type_name
{{accessModifier}}extension UIImage {
  {% if catalogs.count > 1 or param.forceFileNameEnum %}
  {% for catalog in catalogs %}
  {{accessModifier}}enum {{catalog.name|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call enumBlock catalog.assets false %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock catalogs.first.assets false %}
  {% endif %}
}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name
{% endif %}

{%if enableSwiftUI == "true" %}
// swiftlint:disable identifier_name line_length nesting type_body_length type_name
{{accessModifier}}extension Image {
  {% if catalogs.count > 1 or param.forceFileNameEnum %}
  {% for catalog in catalogs %}
  {{accessModifier}}enum {{catalog.name|escapeReservedKeywords}} {
    {% filter indent:2 %}{% call enumBlock catalog.assets true %}{% endfilter %}
  }
  {% endfor %}
  {% else %}
  {% call enumBlock catalogs.first.assets true %}
  {% endif %}
}
// swiftlint:enable identifier_name line_length nesting type_body_length type_name
{% endif %}

// MARK: - Implementation Details
{% if resourceCount.arresourcegroup > 0 %}

{{accessModifier}}struct {{arResourceGroupType}} {
  {{accessModifier}}fileprivate(set) var name: String

  #if os(iOS)
  @available(iOS 11.3, *)
  {{accessModifier}}var referenceImages: Set<ARReferenceImage> {
    return ARReferenceImage.referenceImages(in: self)
  }

  @available(iOS 12.0, *)
  {{accessModifier}}var referenceObjects: Set<ARReferenceObject> {
    return ARReferenceObject.referenceObjects(in: self)
  }
  #endif
}

#if os(iOS)
@available(iOS 11.3, *)
{{accessModifier}}extension ARReferenceImage {
  static func referenceImages(in asset: {{arResourceGroupType}}) -> Set<ARReferenceImage> {
    let bundle = {{param.bundle|default:"BundleToken.bundle"}}
    return referenceImages(inGroupNamed: asset.name, bundle: bundle) ?? Set()
  }
}

@available(iOS 12.0, *)
{{accessModifier}}extension ARReferenceObject {
  static func referenceObjects(in asset: {{arResourceGroupType}}) -> Set<ARReferenceObject> {
    let bundle = {{param.bundle|default:"BundleToken.bundle"}}
    return referenceObjects(inGroupNamed: asset.name, bundle: bundle) ?? Set()
  }
}
#endif
{% endif %}
{% if resourceCount.color > 0 and enableColors == true %}

{{accessModifier}}final class {{colorType}} {
  {{accessModifier}}fileprivate(set) var name: String

  #if os(macOS)
  {{accessModifier}}typealias Color = NSColor
  #elseif os(iOS) || os(tvOS) || os(watchOS)
  {{accessModifier}}typealias Color = UIColor
  #endif

  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
  {{accessModifier}}private(set) lazy var color: Color = {
    guard let color = Color(asset: self) else {
      fatalError("Unable to load color asset named \(name).")
    }
    return color
  }()

  fileprivate init(name: String) {
    self.name = name
  }
}

{{accessModifier}}extension {{colorType}}.Color {
  @available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
  convenience init?(asset: {{colorType}}) {
    let bundle = {{param.bundle|default:"BundleToken.bundle"}}
    #if os(iOS) || os(tvOS)
    self.init(named: asset.name, in: bundle, compatibleWith: nil)
    #elseif os(macOS)
    self.init(named: NSColor.Name(asset.name), bundle: bundle)
    #elseif os(watchOS)
    self.init(named: asset.name)
    #endif
  }
}
{% endif %}
{% if resourceCount.data > 0 %}

{{accessModifier}}struct {{dataType}} {
  {{accessModifier}}fileprivate(set) var name: String

  #if os(iOS) || os(tvOS) || os(macOS)
  @available(iOS 9.0, macOS 10.11, *)
  {{accessModifier}}var data: NSDataAsset {
    guard let data = NSDataAsset(asset: self) else {
      fatalError("Unable to load data asset named \(name).")
    }
    return data
  }
  #endif
}

#if os(iOS) || os(tvOS) || os(macOS)
@available(iOS 9.0, macOS 10.11, *)
{{accessModifier}}extension NSDataAsset {
  convenience init?(asset: {{dataType}}) {
    let bundle = {{param.bundle|default:"BundleToken.bundle"}}
    #if os(iOS) || os(tvOS)
    self.init(name: asset.name, bundle: bundle)
    #elseif os(macOS)
    self.init(name: NSDataAsset.Name(asset.name), bundle: bundle)
    #endif
  }
}
#endif
{% endif %}
{% if enableUIKit == "true" %}

extension UIImage {
    static func m(_ name: String) -> UIImage? {
        UIImage(named: name, in: nil, compatibleWith: nil)
    }
}
{% endif %}
{% if enableSwiftUI == "true" %}

extension Image {
    static func m(_ name: String) -> Image? {
        Image(name)
    }
}
{% endif %}
{% else %}
// No assets found
{% endif %}
